#+TITLE: Notes when learning emacs
#+PROPERTY:  header-args:emacs-lisp :tangle no :noweb yes :mkdirp yes

* Overview

#+begin_src emacs-lisp :tangle ./init.el :mkdirp yes :noweb yes
  <<package_manager>>

  <<basic_ui_configuration>>
  <<ui_configuration>>

  <<font_configuration>>

  <<evil>>

  <<org_mode>>


  <<magit>>

  <<development>>

  <<utilities>>

  <<keybinding>>
#+end_src

* Package Manager
#+NAME: package_manager
#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* Basic UI Configuration

#+NAME: basic_ui_configuration
#+begin_src emacs-lisp

  ;; You will most likely need to adjust this font size for your system!
  (defvar runemacs/default-font-size 180)

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

* Font Configuration
#+NAME: font_configuration
#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "Cantarell" :height 100)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Cantarell" :height 100)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :weight 'regular :height 100)

#+end_src

* Keybinding Configuration
#+NAME: keybinding
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (general-define-key "C-M-j" 'counsel-switch-buffer)

  ;; "t"  '(:ignore t :which-key "toggles")
  (rune/leader-keys "lt" '(counsel-load-theme :which-key "choose theme"))
  (rune/leader-keys "st" '(hydra-text-scale/body :which-key "scale text"))
  (rune/leader-keys "bm" '(hydra-bookmark/body :which-key "bookmark"))

#+end_src

* Evil
#+NAME: evil
#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* UI Configuration
#+NAME: ui_configuration
#+begin_src emacs-lisp
  <<color_theme>>
  <<modeline>>
  <<which_key>>
  <<ivy_and_counsel>>
  <<helpful>>
  <<hydra>>
  <<rainbow_delimiters>>
  <<highlight_indent_guides>>
#+end_src

** Color Theme
#+NAME: color_theme
#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-monokai-classic t))

#+end_src

** Modeline
#+NAME: modeline
#+begin_src emacs-lisp

  ;; M-x all-the-icons-install-fonts

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key
#+NAME: which_key
#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel
#+NAME: ivy_and_counsel
#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** Helpful Help Commands
#+NAME: helpful
#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Hydra
#+NAME: hydra
#+begin_src emacs-lisp

  (use-package hydra)

  <<text_scaling>>
  <<bookmark>>

#+end_src

*** Text Scaling
#+NAME: text_scaling
#+begin_src emacs-lisp

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

#+end_src

*** Bookmark
#+NAME: bookmark
#+begin_src emacs-lisp

  (use-package bm
    :config
    ;; where to store persistant files
    (setq bm-repository-file "~/.emacs.d/bm-repo")
    )

  (defhydra hydra-bookmark (:timeout 9999999)
    "bookmark"
    ("j" bm-next "next bookmark")
    ("k" bm-previous "previous bookmark")
    ("h" bm-toggle "toggle bookmark")
    ("g" goto-line "goto line")
    ("f" nil "finished" :exit t))

#+end_src

** Rainbow Delimiters
#+NAME: rainbow_delimiters
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Highlight Indent Guides
#+NAME: highlight_indent_guides
#+begin_src emacs-lisp

  (use-package highlight-indent-guides
    :custom ((highlight-indent-guides-method 'character))
    :config
    (setq highlight-indent-guides-mode 1))

#+end_src

* Org Mode
#+NAME: org_mode
#+begin_src emacs-lisp
  <<font_faces>>
  <<ellipsis>>
  <<bullets>>
  ;;<<center_alignment>>
  <<configure_babel>>
  <<snippets>>
#+end_src

** Font Faces
#+NAME: font_faces
#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit '(fixed-pitch) :slant 'italic :weight 'light))

#+end_src

** Ellipsis
#+NAME: ellipsis
#+begin_src emacs-lisp

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (efs/org-font-setup))

#+end_src

** Nicer Heading Bullets
#+NAME: bullets
#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Center Org Buffers
#+NAME: center_alignment
#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Configure Babel Languages
#+NAME: configure_babel
#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Snippets
#+NAME: snippets
#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

* Magit
#+NAME: magit
#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (use-package forge)

#+end_src

* Development
#+NAME: development
#+begin_src emacs-lisp
  <<ide_lsp_mode>>
  <<cpp_mode>>
  <<projectile>>
  <<company_mode>>
  <<dumb_jump>>
#+end_src

** IDE Features with lsp-mode
#+NAME: ide_lsp_mode
#+begin_src emacs-lisp
  <<lsp_mode>>
  ;;<<lsp_ui>>
  <<lsp_treemacs>>
  <<lsp_ivy>>
#+end_src

*** lsp_mode
#+NAME: lsp_mode
#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+end_src

*** lsp_ui
#+NAME: lsp_ui
#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp_treemacs
#+NAME: lsp_treemacs
#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

*** lsp_ivy
#+NAME: lsp_ivy
#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

** Cpp Mode
#+NAME: cpp_mode
#+begin_src emacs-lisp
  (add-hook 'c++-mode-hook 'lsp-deferred)
#+end_src
** Projectile
#+NAME: projectile
#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/repos")
      (setq projectile-project-search-path '("~/repos")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Company Mode
#+NAME: company_mode
#+begin_src emacs-lisp

(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :hook (company-mode . company-box-mode))

#+end_src

** Dumb Jump
#+NAME: dumb_jump
#+begin_src emacs-lisp

  (use-package dumb-jump
    :init
    (dumb-jump-mode)
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config (setq dumb-jump-selector 'ivy))

#+end_src

* Utilities
#+NAME: utilities
#+begin_src emacs-lisp
  <<copy_file_name>>
  <<replace_hyperlinks_by_description>>
#+end_src

** Copy File Name
#+NAME: copy_file_name
#+begin_src emacs-lisp

  (defun copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))

#+end_src

** Replace Hyperlinks By Description
#+NAME: replace_hyperlinks_by_description
#+begin_src emacs-lisp

  (defun org-replace-all-links-by-description (&optional start end)
    "Find all org links and replace by their descriptions."
    (interactive
     (if (use-region-p) (list (region-beginning) (region-end))
       (list (point-min) (point-max))))
    (save-excursion
      (save-restriction
        (narrow-to-region start end)
        (goto-char (point-min))
        (while (re-search-forward org-link-bracket-re nil t)
          (replace-match (match-string-no-properties 
                          (if (match-end 2) 2 1)))))))

#+end_src
